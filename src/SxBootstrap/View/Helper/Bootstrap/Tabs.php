<?php
/**
 * Tabs
 *
 * @category   SxBootstrap
 * @package    SxBootstrap_View
 * @subpackage Helper
 */
namespace SxBootstrap\View\Helper\Bootstrap;

use Zend\View\Helper\AbstractHelper;
use Zend\View\Model\ViewModel;
use SxBootstrap\Exception;

/**
 * Tabs
 *
 * @category   SxBootstrap
 * @package    SxBootstrap_View
 * @subpackage Helper
 */
class Tabs extends AbstractHelper
{
    /**
     * @var string Holds the default string used to prepend to the id.
     */
    protected $defaultTabIdentifier = 'tab';

    /**
     * @var integer Holds the number of tabs
     */
    protected $tabCount = 1;

    /**
     * @var array Holds the tabs
     */
    protected $tabs;

    /**
     * @var string The identifier of the active tab
     */
    protected $active;

    /**
     * Invoke tabs. Simply return this to allow chained methods to be used.
     *
     * @return Tabs fluent interface
     */
    public function __invoke()
    {
        return $this;
    }

    /**
     * Renders the tabs and returns the markup.
     *
     * @return string
     */
    public function __toString()
    {
        return $this->render();
    }

    /**
     * Renders the tabs and returns the markup.
     *
     * @return string
     */
    protected function render()
    {
        if (null === $this->active) {
            $this->setActive(key($this->tabs));
        }

        $tabs       = new ViewModel;
        $tabs->tabs = $this->tabs;

        $tabs->setTemplate('sxbootstrap/tabs/tabs');

        return $this->getView()->render($tabs);
    }

    /**
     * Set the active tab. Falls back to last added tab when $tabId was not provided.
     *
     * @param string $tabId The to-be-marked active tab's identifier.
     *
     * @return Tabs
     * @throws Exception\InvalidArgumentException
     */
    public function setActive($tabId = null)
    {
        $tabId = is_null($tabId) ? $this->getTabId(true) : $tabId;
        if (empty($this->tabs[$tabId])) {
            throw new Exception\InvalidArgumentException('Invalid tab id supplied.');
        }

        if (null !== $this->active) {
            $this->tabs[$this->active]['active'] = false;
        }

        $this->tabs[$tabId]['active'] = true;
        $this->active                 = $tabId;

        return $this;
    }

    /**
     * Add a new tab.
     *
     * @param string  $label   The label for the tab.
     * @param string  $content The tab's content. Can be added later.
     * @param string  $tabId   The tab's id. Autogenerated when left empty.
     * @param boolean $active  If this tab should be active.
     *
     * @return Tabs Fluent interface
     */
    public function add($label, $content = null, $tabId = null, $active = false)
    {
        $tabId = is_null($tabId) ? $this->getTabId() : $tabId;
        $label = is_null($label) ? $tabId : $label;

        $this->tabs[$tabId] = array (
            'label'     => $label,
            'content'   => $content,
            'active'    => $active,
        );

        return $this;
    }

    /**
     * Set the content for tab $tabId. Falls back to last added tab when $tabId was not provided.
     *
     * @param string $content The content to be set.
     * @param string $tabId   The id of the tab you wish to set this content for.
     *
     * @throws Exception\InvalidArgumentException
     */
    public function setContent($content, $tabId = null)
    {
        $tabId = is_null($tabId) ? $this->getTabId(true) : $tabId;

        if (empty($this->tabs[$tabId])) {
            throw new Exception\InvalidArgumentException('Invalid tab id supplied.');
        }

        $this->tabs[$tabId]['content'] = $content;
    }

    /**
     * Add the content for tab $tabId. Falls back to last added tab when $tabId was not provided.
     *
     * @param string $content The content to be added.
     * @param string $tabId   The id of the tab you wish to add this content to.
     *
     * @throws Exception\InvalidArgumentException
     */
    public function addContent($content, $tabId = null)
    {
        $tabId = is_null($tabId) ? $this->getTabId(true) : $tabId;

        if (empty($this->tabs[$tabId])) {
            throw new Exception\InvalidArgumentException('Invalid tab id supplied.');
        }

        $this->tabs[$tabId]['content'] .= $content;
    }

    /**
     * Generate an id for a tab, or get the last added one.
     *
     * @param boolean $current Whether or not to get the last added id.
     *
     * @return string
     */
    protected function getTabId($current = false)
    {
        if (true === $current) {
            return key($this->tabs);
        }

        $c = $this->tabCount++;

        return $this->defaultTabIdentifier . $c;
    }
}
